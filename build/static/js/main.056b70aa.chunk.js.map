{"version":3,"sources":["utils/axios-cache-configure.js","pages/ProcessedLocally.js","components/AxisBottom.js","components/AxisLeft.js","components/Marks.js","components/Lines.js","pages/VaccinationsWithOverlay.js","utils/graph-helpers.js","pages/ProcessedServerSide.js","App.js","hooks/UseVaccinationsData.js","hooks/UseOrdersData.js","hooks/UseCasesData.js","hooks/UseServerData.js","index.js"],"names":["configure","name","a","localforage","defineDriver","memoryDriver","forageStore","createInstance","driver","INDEXEDDB","LOCALSTORAGE","_driver","setup","baseURL","cache","maxAge","store","ProcessedLocally","vaccinationsData","ordersData","totalVaccines","antiqua","orders","vaccines","solarBuddhica","zerpfy","forEach","order","vaccine","injections","total","getTotalVaccines","style","margin","length","AxisBottom","xScale","innerHeight","tickFormat","ticks","timeWeek","every","map","tickValue","className","transform","y1","y2","stroke","dy","y","textAnchor","fontSize","Date","toLocaleDateString","AxisLeft","yScale","innerWidth","x2","x","Marks","data","yValue","d","x0","width","x1","height","toString","Lines","xValue","circleRadius","line","curve","curveLinear","cx","cy","r","VaccinationsWithOverlay","casesData","useState","extendedView","setExtendedView","dateValueMax","setDateValueMax","dateValueExtended","setDateValueExtended","dateValueMin","setDateValueMin","filterSelector","setFilterSelector","vaccinationsFilterOptions","vaccinationsFilter","setVaccinationsFilter","casesFilterOptions","casesFilter","setCasesFilter","useEffect","d3","vaccinationDate","setDate","getDate","filteredVaccinationsData","filter","obj","sourceBottle","healthCareDistrict","filteredCasesData","Area","Time","threshold","start","end","arr","i","push","getDaysArray","vaccinationBuckets","value","domain","thresholds","range","nice","yValueVaccine","yValueCases","val","yScaleDomain","vaccineMax","max","casesMax","getYScaleDomain","id","href","onChange","e","index","target","handleSelectorChange","onClick","ProcessedServerSide","bottlesExpiringToday","bottlesExpiringWithin10Days","ordersArrivingToday","ordersMade","usedVaccines","vaccinationsOrdered","Antiqua","SolarBuddhica","Zerpfy","App","date","setData","then","api","get","response","formattedData","UseVaccinationsData","UseOrdersData","csv","UseCasesData","serverData","toISOString","UseServerData","console","log","filteredOrders","arrived","filteredVaccinations","display","flexDirection","alignItems","justifyContent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.056b70aa.chunk.js","sourcesContent":["import localforage from 'localforage'\r\nimport memoryDriver from 'localforage-memoryStorageDriver'\r\nimport { setup } from 'axios-cache-adapter'\r\n\r\nexport const configure = async (name) => {\r\n  // Register the custom `memoryDriver` to `localforage`\r\n  await localforage.defineDriver(memoryDriver)\r\n\r\n  // Create `localforage` instance\r\n  const forageStore = localforage.createInstance({\r\n    // List of drivers used\r\n    driver: [\r\n      localforage.INDEXEDDB,\r\n      localforage.LOCALSTORAGE,\r\n      memoryDriver._driver,\r\n    ],\r\n    // Prefix all storage keys to prevent conflicts\r\n    name: name,\r\n  })\r\n\r\n  // Create `axios` instance with pre-configured `axios-cache-adapter` using a `localforage` store\r\n  return setup({\r\n    // `axios` options\r\n    baseURL: 'http://localhost:4000/api',\r\n\r\n    // `axios-cache-adapter` options\r\n    cache: {\r\n      maxAge: 15 * 60 * 1000,\r\n      store: forageStore, // Pass `localforage` store to `axios-cache-adapter`\r\n    },\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\nconst ProcessedLocally = ({ vaccinationsData, ordersData }) => {\r\n  if (!vaccinationsData || !ordersData) {\r\n    return <pre>Filtering...</pre>\r\n  }\r\n\r\n  const getTotalVaccines = () => {\r\n    let antiqua = { orders: 0, vaccines: 0 }\r\n    let solarBuddhica = { orders: 0, vaccines: 0 }\r\n    let zerpfy = { orders: 0, vaccines: 0 }\r\n\r\n    ordersData.forEach((order) => {\r\n      switch (order.vaccine) {\r\n        case 'Antiqua':\r\n          antiqua.orders++\r\n          antiqua.vaccines += order.injections\r\n          break\r\n        case 'SolarBuddhica':\r\n          solarBuddhica.orders++\r\n          solarBuddhica.vaccines += order.injections\r\n          break\r\n        case 'Zerpfy':\r\n          zerpfy.orders++\r\n          zerpfy.vaccines += order.injections\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    })\r\n\r\n    let total = {\r\n      orders: antiqua.orders + solarBuddhica.orders + zerpfy.orders,\r\n      vaccines: antiqua.vaccines + solarBuddhica.vaccines + zerpfy.vaccines,\r\n    }\r\n\r\n    return { antiqua, solarBuddhica, zerpfy, total }\r\n  }\r\n  const totalVaccines = getTotalVaccines()\r\n  return (\r\n    <div style={{ margin: '20px' }}>\r\n      <h2>This data is processed in browser</h2>\r\n\r\n      <div>Vaccines used thus far: {vaccinationsData.length}</div>\r\n      <div>\r\n        <div>Total orders made thus far: {ordersData.length}</div>\r\n        <div>By producer;</div>\r\n        <ul>\r\n          <li>Antiqua: {totalVaccines.antiqua.orders}</li>\r\n          <li>SolarBuddhica: {totalVaccines.solarBuddhica.orders}</li>\r\n          <li>Zerpfy: {totalVaccines.zerpfy.orders}</li>\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          Total bottles ordered thus far: {totalVaccines.total.vaccines}\r\n        </div>\r\n        <div>By producer;</div>\r\n        <ul>\r\n          <li>Antiqua: {totalVaccines.antiqua.vaccines}</li>\r\n          <li>SolarBuddhica: {totalVaccines.solarBuddhica.vaccines}</li>\r\n          <li>Zerpfy: {totalVaccines.zerpfy.vaccines}</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProcessedLocally\r\n","import { timeWeek } from 'd3'\r\n\r\nexport const AxisBottom = ({ xScale, innerHeight, tickFormat }) => {\r\n  return (\r\n    <>\r\n      {xScale.ticks(timeWeek.every(1)).map((tickValue) => (\r\n        //We can wrap each tick mark in a group so we can add text. by shift the group to the xScale tick mark we eleminate the need for specifying the x1 and x2 in the line element\r\n        <g\r\n          className='tick'\r\n          key={tickValue}\r\n          transform={`translate(${xScale(tickValue)}, 0)`}>\r\n          {\r\n            //xScale.ticks() returns an array of tick points divided along the xScale, we can map thoes tick marks and use SVG Line element to draw a grid.\r\n            //We specify the x1(The X axes on the top) and x2(The X axes on the bottom) to be the xScale tick value. This way they end and start equally on top and bottom\r\n            //we specify the y1 and y 2 to be the from 0(the bottom of the group) to {innerHeight} the top of the group.\r\n          }\r\n          <line y1='0' y2={innerHeight} stroke='black' />\r\n          <text\r\n            dy='.71em'\r\n            y={innerHeight + 3}\r\n            style={{ textAnchor: 'middle', fontSize: '0.6em' }}>\r\n            {new Date(tickValue).toLocaleDateString()}\r\n          </text>\r\n        </g>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n","export const AxisLeft = ({ yScale, innerWidth }) => {\r\n  return (\r\n    <>\r\n      {yScale.ticks().map((tickValue) => (\r\n        //Now we take the yScale and access the domain object(which is the country we passed in earlier line 36) and we map them and extract the tickvalue\r\n        //we can use the yScale(tickvalue) to get the starting point of each bar and offset it by  half of the yScale.bandwidth to center the text in each bar\r\n        <g\r\n          className='tick'\r\n          key={tickValue}\r\n          transform={`translate(0, ${yScale(tickValue)})`}>\r\n          <line x2={innerWidth} />\r\n          <text style={{ textAnchor: 'end' }} dy='.32em' x='-3'>\r\n            {tickValue}\r\n          </text>\r\n        </g>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n","export const Marks = ({ data, yScale, xScale, yValue, innerHeight }) => {\r\n  return (\r\n    <>\r\n      {data.map((d) => (\r\n        <rect\r\n          className='mark'\r\n          key={d.x0}\r\n          y={yScale(yValue(d))}\r\n          x={xScale(d.x0)}\r\n          width={xScale(d.x1) - xScale(d.x0)}\r\n          height={innerHeight - yScale(yValue(d))}>\r\n          <title>\r\n            Date: {d.x1.toString()}\r\n            {'\\n'}\r\n            Vaccinations: {yValue(d)}\r\n          </title>\r\n        </rect>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n","import { line, curveLinear } from 'd3'\r\n\r\nexport const Lines = ({\r\n  data,\r\n  yScale,\r\n  xScale,\r\n  yValue,\r\n  xValue,\r\n  circleRadius = 5,\r\n}) => {\r\n  return (\r\n    <g className='line'>\r\n      <path\r\n        d={line()\r\n          .x((d) => xScale(xValue(d)))\r\n          .y((d) => yScale(yValue(d)))\r\n          .curve(curveLinear)(data)}\r\n      />\r\n      {data.map((d) => (\r\n        <circle\r\n          cx={xScale(xValue(d))}\r\n          cy={yScale(yValue(d))}\r\n          r={circleRadius}\r\n          key={xValue(d)}>\r\n          <title>\r\n            Date: {xValue(d).toString()}\r\n            {'\\n'}\r\n            Num Cases: {yValue(d)}\r\n          </title>\r\n        </circle>\r\n      ))}\r\n    </g>\r\n  )\r\n}\r\n","import './VaccinationsWithOverlay.css'\r\nimport React, { useState, useEffect } from 'react'\r\nimport * as d3 from 'd3'\r\n\r\nimport { AxisBottom } from '../components/AxisBottom'\r\nimport { AxisLeft } from '../components/AxisLeft'\r\nimport { Marks } from '../components/Marks'\r\nimport { Lines } from '../components/Lines'\r\n\r\nimport { getDaysArray, getYScaleDomain } from '../utils/graph-helpers'\r\n\r\n//TODO: Add filtering drop down boxes\r\n\r\n//Variables for the dimensions of the graph\r\nconst width = 600\r\nconst height = 300\r\nconst margin = { top: 20, right: 20, bottom: 45, left: 50 }\r\nconst innerHeight = height - margin.top - margin.bottom\r\nconst innerWidth = width - margin.left - margin.right\r\n\r\nconst VaccinationsWithOverlay = ({ vaccinationsData, casesData }) => {\r\n  const [extendedView, setExtendedView] = useState(false)\r\n  const handleExtendedView = () => {\r\n    setExtendedView(!extendedView)\r\n  }\r\n\r\n  const [dateValueMax, setDateValueMax] = useState(new Date())\r\n  const [dateValueExtended, setDateValueExtended] = useState(new Date())\r\n  const [dateValueMin, setDateValueMin] = useState(new Date())\r\n\r\n  const [filterSelector, setFilterSelector] = useState(0)\r\n  const vaccinationsFilterOptions = ['', 'HYKS', 'KYS', 'OYS', 'TAYS', 'TYKS']\r\n  const [vaccinationsFilter, setVaccinationsFilter] = useState(\r\n    vaccinationsFilterOptions[0]\r\n  )\r\n  const casesFilterOptions = [\r\n    'All areas',\r\n    'Helsinki and Uusimaa Hospital District',\r\n    'North Savo Hospital District',\r\n    'North Ostrobothnia Hospital District',\r\n    'Pirkanmaa Hospital District',\r\n    'Southwest Finland Hospital District',\r\n  ]\r\n  const [casesFilter, setCasesFilter] = useState(casesFilterOptions[0])\r\n\r\n  const handleSelectorChange = (e) => {\r\n    const index = e.target.value\r\n    setFilterSelector(index)\r\n    setVaccinationsFilter(vaccinationsFilterOptions[index])\r\n    setCasesFilter(casesFilterOptions[index])\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (vaccinationsData) {\r\n      setDateValueMin(\r\n        new Date(d3.min(vaccinationsData, (d) => d.vaccinationDate))\r\n      )\r\n      setDateValueMax(\r\n        new Date(d3.max(vaccinationsData, (d) => d.vaccinationDate))\r\n      )\r\n    }\r\n  }, [vaccinationsData])\r\n\r\n  useEffect(() => {\r\n    if (extendedView) {\r\n      setDateValueExtended(\r\n        new Date(dateValueMax).setDate(dateValueMax.getDate() + 15)\r\n      )\r\n    }\r\n    if (!extendedView) {\r\n      setDateValueExtended(\r\n        new Date(dateValueMax).setDate(dateValueMax.getDate())\r\n      )\r\n    }\r\n  }, [dateValueMax, extendedView])\r\n\r\n  //Null check data is received\r\n  if (!vaccinationsData || !casesData) {\r\n    return <pre>Loading Data...</pre>\r\n  }\r\n\r\n  //#region Data Parsing Logic\r\n\r\n  //-- Data filtering\r\n  const filteredVaccinationsData = !vaccinationsFilter\r\n    ? vaccinationsData\r\n    : vaccinationsData.filter(\r\n        (obj) => obj.sourceBottle.healthCareDistrict === vaccinationsFilter\r\n      )\r\n\r\n  const filteredCasesData = casesData.filter(\r\n    (obj) =>\r\n      obj.Area === casesFilter &&\r\n      obj.Time > dateValueMin &&\r\n      obj.Time < dateValueExtended\r\n  )\r\n\r\n  //-- Getting thresholds for the binning\r\n  const threshold = getDaysArray(dateValueMin, dateValueMax)\r\n\r\n  const vaccinationBuckets = d3\r\n    .bin()\r\n    .value((d) => d.vaccinationDate)\r\n    .domain([dateValueMin, dateValueMax])\r\n    .thresholds(threshold)(filteredVaccinationsData)\r\n  //#endregion\r\n\r\n  //Null check if data if parsing\r\n  if (!filteredVaccinationsData || !filteredCasesData || !vaccinationBuckets) {\r\n    return <pre>Parsing Data...</pre>\r\n  }\r\n\r\n  //#region Visualization Logic\r\n  //-- xAxis values\r\n  const xValueCases = (d) => d.Time\r\n\r\n  const xScale = d3\r\n    .scaleTime()\r\n    .domain([dateValueMin, dateValueExtended])\r\n    .range([0, innerWidth])\r\n    .nice()\r\n\r\n  //-- yAxis Values\r\n  const yValueVaccine = (d) => d.length\r\n  const yValueCases = (d) => d.val\r\n\r\n  const yScaleDomain = getYScaleDomain(\r\n    vaccinationBuckets,\r\n    filteredCasesData,\r\n    yValueVaccine,\r\n    yValueCases\r\n  )\r\n\r\n  const yScale = d3\r\n    .scaleLinear()\r\n    .domain([yScaleDomain, 0])\r\n    .range([0, innerHeight])\r\n    .nice()\r\n  //#endregion\r\n\r\n  return (\r\n    <div id='graph'>\r\n      <h1>Correlation of COVID-19 vaccinations and Reported cases</h1>\r\n      <h5>\r\n        This is a graphical representation of COVID-19 vaccinations (Source:\r\n        {\r\n          <a href='https://github.com/solita/vaccine-exercise-2021'>\r\n            Solita Exercise Git Repo\r\n          </a>\r\n        }\r\n        ) compared with Daily reported COVID-19 cases (Source:{' '}\r\n        {\r\n          <a href='https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case'>\r\n            sampo.thl.fi\r\n          </a>\r\n        }\r\n        )\r\n      </h5>\r\n      <ul>\r\n        <li>\r\n          <strong>Area</strong> - The provence displayed\r\n        </li>\r\n        <li>\r\n          <strong>Extended View</strong> - Toggle drop-off period (2 weeks / 15\r\n          days)\r\n        </li>\r\n      </ul>\r\n      <label>\r\n        Area:\r\n        <select\r\n          id='area'\r\n          value={filterSelector}\r\n          onChange={(e) => handleSelectorChange(e)}>\r\n          <option value={0}>All Areas</option>\r\n          <option value={1}>Uusimaa</option>\r\n          <option value={2}>North Savo</option>\r\n          <option value={3}>North Ostrobothnia</option>\r\n          <option value={4}>Pirkanmaa</option>\r\n          <option value={5}>Southwest Finland</option>\r\n        </select>\r\n      </label>\r\n      <label>\r\n        Extended View:\r\n        <button id='extended-view' onClick={handleExtendedView}>\r\n          {extendedView ? 'Hide' : 'Show'}\r\n        </button>\r\n      </label>\r\n      <svg width={width} height={height}>\r\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n          <AxisBottom xScale={xScale} innerHeight={innerHeight} />\r\n          <AxisLeft yScale={yScale} innerWidth={innerWidth} />\r\n          <Marks\r\n            data={vaccinationBuckets}\r\n            yScale={yScale}\r\n            xScale={xScale}\r\n            yValue={yValueVaccine}\r\n            innerHeight={innerHeight}\r\n          />\r\n          <Lines\r\n            data={filteredCasesData}\r\n            yScale={yScale}\r\n            xScale={xScale}\r\n            yValue={yValueCases}\r\n            xValue={xValueCases}\r\n          />\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VaccinationsWithOverlay\r\n","import { max } from 'd3'\r\n\r\nexport const getDaysArray = (start, end) => {\r\n  let arr = []\r\n  for (const i = new Date(start); i <= end; i.setDate(i.getDate() + 1)) {\r\n    arr.push(new Date(i))\r\n  }\r\n  return arr\r\n}\r\n\r\nexport const getYScaleDomain = (\r\n  vaccinationBuckets,\r\n  filteredCasesData,\r\n  yValueVaccine,\r\n  yValueCases\r\n) => {\r\n  const vaccineMax = max(vaccinationBuckets, yValueVaccine)\r\n  const casesMax = max(filteredCasesData, yValueCases)\r\n\r\n  return vaccineMax > casesMax ? vaccineMax : casesMax\r\n}\r\n","import React from 'react'\r\n\r\nconst ProcessedServerSide = ({ data, setDate }) => {\r\n  if (!data) {\r\n    return <div>Fetching data...</div>\r\n  }\r\n  const {\r\n    bottlesExpiringToday,\r\n    bottlesExpiringWithin10Days,\r\n    ordersArrivingToday,\r\n    ordersMade,\r\n    usedVaccines,\r\n    vaccinationsOrdered,\r\n  } = data\r\n  const { Antiqua, SolarBuddhica, Zerpfy } = vaccinationsOrdered\r\n  return (\r\n    <div style={{ margin: '20px' }}>\r\n      <h2>This data is processed server side</h2>\r\n\r\n      <div>Vaccines used thus far: {usedVaccines}</div>\r\n      <div>\r\n        <div>Total orders made thus far: {ordersMade}</div>\r\n        <div>By producer;</div>\r\n        <ul>\r\n          <li>Antiqua: {Antiqua}</li>\r\n          <li>SolarBuddhica: {SolarBuddhica}</li>\r\n          <li>Zerpfy: {Zerpfy}</li>\r\n        </ul>\r\n      </div>\r\n      <div>Bottles expiring today: {bottlesExpiringToday}</div>\r\n      <div>\r\n        Bottles expiring within the next 10 days: {bottlesExpiringWithin10Days}\r\n      </div>\r\n      <div>Orders arriving today: {ordersArrivingToday}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProcessedServerSide\r\n","import { UseCasesData } from './hooks/UseCasesData'\nimport { UseOrdersData } from './hooks/UseOrdersData'\nimport { UseVaccinationsData } from './hooks/UseVaccinationsData'\nimport ProcessedLocally from './pages/ProcessedLocally'\nimport VaccinationsWithOverlay from './pages/VaccinationsWithOverlay'\nimport ProcessedServerSide from './pages/ProcessedServerSide'\nimport { UseServerData } from './hooks/UseServerData'\nimport { useState } from 'react'\n\nimport DatePicker from 'react-date-picker'\n\nconst App = () => {\n  const [date, setDate] = useState(new Date())\n  const vaccinationsData = UseVaccinationsData()\n  const ordersData = UseOrdersData()\n  const casesData = UseCasesData()\n  const serverData = UseServerData(date)\n  console.log(date)\n\n  if (!ordersData || !vaccinationsData) {\n    return <div>Fetching data...</div>\n  }\n  const filteredOrders = ordersData.filter(\n    (obj) => new Date(obj.arrived) <= date\n  )\n  const filteredVaccinations = vaccinationsData.filter(\n    (obj) => obj.vaccinationDate <= date\n  )\n\n  return (\n    <div\n      className='App'\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}>\n      <VaccinationsWithOverlay\n        vaccinationsData={filteredVaccinations}\n        casesData={casesData}\n      />\n      <label>\n        Change date:\n        <DatePicker onChange={setDate} value={date} />\n      </label>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-evenly',\n        }}>\n        <ProcessedLocally\n          vaccinationsData={filteredVaccinations}\n          ordersData={filteredOrders}\n        />\n        <ProcessedServerSide data={serverData} setDate={setDate} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { useEffect, useState } from 'react'\r\nimport { configure } from '../utils/axios-cache-configure'\r\n\r\nexport const UseVaccinationsData = () => {\r\n  const [data, setData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    configure('vaccinations').then(async (api) => {\r\n      const response = await api.get('/vaccinations')\r\n      const data = response.data\r\n\r\n      const formattedData = data.map((obj) => ({\r\n        ...obj,\r\n        vaccinationDate: new Date(obj.vaccinationDate),\r\n      }))\r\n\r\n      setData(formattedData)\r\n    })\r\n  }, [])\r\n  return data\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { configure } from '../utils/axios-cache-configure'\r\n\r\nexport const UseOrdersData = () => {\r\n  const [data, setData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    configure('orders').then(async (api) => {\r\n      const response = await api.get('/orders')\r\n      setData(response.data)\r\n    })\r\n  }, [])\r\n  return data\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { csv } from 'd3'\r\n\r\nconst csvUrl =\r\n  'https://gist.githubusercontent.com/Serathian/86c591b116df5efe282a8350f4685e61/raw/938ea4e230d56faa68b94fd5a3cc35ee4881b79f/'\r\nexport const UseCasesData = () => {\r\n  const [data, setData] = useState(null)\r\n  useEffect(() => {\r\n    const row = (d) => {\r\n      d.Time = new Date(d.Time)\r\n      d.val = +d.val\r\n      return d\r\n    }\r\n    csv(csvUrl, row).then(setData)\r\n  }, [])\r\n  return data\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { configure } from '../utils/axios-cache-configure'\r\n\r\nexport const UseServerData = (date) => {\r\n  const [data, setData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    configure('data').then(async (api) => {\r\n      const response = await api.get(`/data/${date.toISOString()}`)\r\n      setData(response.data)\r\n    })\r\n  }, [date])\r\n  return data\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}